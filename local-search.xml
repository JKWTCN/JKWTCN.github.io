<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记录一次有趣的debug</title>
    <link href="/2025/07/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/"/>
    <url>/2025/07/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/</url>
    
    <content type="html"><![CDATA[<p>最近上班摸鱼在写一个拼图软件:<a href="https://github.com/JKWTCN/ImageSplicing">JKWTCN&#x2F;ImageSplicing</a>,暂定名字叫拼好图;</p><p>今天晚上发现了一个bug,修复前代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (rightSplicingLine &amp;&amp; leftSplicingLine) &#123;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!rightSplicingLine &amp;&amp; leftSplicingLine) &#123;<br>    qreal lineLX = leftSplicingLine -&gt; <span class="hljs-built_in">line</span>().<span class="hljs-built_in">x1</span>();<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;最右边图片右移&quot;</span> &lt;&lt; rightX &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; lineLX &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!(leftX &lt;= lineLX)) &#123;<br>        newPos.<span class="hljs-built_in">setX</span>(oldPos.<span class="hljs-built_in">x</span>());<br>        <span class="hljs-keyword">return</span> newPos;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rightSplicingLine &amp;&amp; !leftSplicingLine) &#123;<br>    qreal lineRX = rightSplicingLine -&gt; <span class="hljs-built_in">line</span>().<span class="hljs-built_in">x1</span>();<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;最左边图片右移&quot;</span> &lt;&lt; rightX &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; lineRX &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!(rightX &gt;= lineRX)) &#123;<br>        newPos.<span class="hljs-built_in">setX</span>(oldPos.<span class="hljs-built_in">x</span>());<br>        <span class="hljs-keyword">return</span> newPos;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修复后代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (rightSplicingLine &amp;&amp; leftSplicingLine) &#123;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!rightSplicingLine &amp;&amp; leftSplicingLine) &#123;<br>    qreal lineLX = leftSplicingLine -&gt; <span class="hljs-built_in">line</span>().<span class="hljs-built_in">x1</span>();<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;最右边图片右移&quot;</span> &lt;&lt; rightX &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; lineLX &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!(leftX + deltaX &lt;= lineLX)) &#123;<br>        newPos.<span class="hljs-built_in">setX</span>(oldPos.<span class="hljs-built_in">x</span>());<br>        <span class="hljs-keyword">return</span> newPos;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rightSplicingLine &amp;&amp; !leftSplicingLine) &#123;<br>    qreal lineRX = rightSplicingLine -&gt; <span class="hljs-built_in">line</span>().<span class="hljs-built_in">x1</span>();<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;最左边图片右移&quot;</span> &lt;&lt; rightX &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; lineRX &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!(rightX + deltaX &gt;= lineRX)) &#123;<br>        newPos.<span class="hljs-built_in">setX</span>(oldPos.<span class="hljs-built_in">x</span>());<br>        <span class="hljs-keyword">return</span> newPos;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因是我判断移动的时候是把移动之前的值和拼接线判断,而不是移动之后的值,就会造成如果移动的速度非常快,图片实际上可以拽离剪切线非常多,从而产生一个非常明显的白边.</p><p><img src="/image/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/1753193101455.gif" alt="可以看到右边的图片拉动快了有明显的脱离"></p><p>修复后效果:</p><p><img src="/image/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/1753193414462.gif" alt="现在就不会脱离拼接线了"></p><p>但是在公司我拉拽却没有发现这个bug,想来,原因应该是公司的内存只有8GB,我还开了VSCODE,QT CREATOR和其他软件,本身就有些卡顿了,再加上公司鼠标的DPI不高,所以拉拽的幅度不明显罢了.</p>]]></content>
    
    
    
    <tags>
      
      <tag>拼好图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决QT设置Ctrl+鼠标滚轮缩放 会触发GraphicsView的鼠标滚轮移动</title>
    <link href="/2025/07/21/%E8%A7%A3%E5%86%B3QT%E8%AE%BE%E7%BD%AECtrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE-%E4%BC%9A%E8%A7%A6%E5%8F%91graphicsView%E7%9A%84%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%A7%BB%E5%8A%A8/"/>
    <url>/2025/07/21/%E8%A7%A3%E5%86%B3QT%E8%AE%BE%E7%BD%AECtrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE-%E4%BC%9A%E8%A7%A6%E5%8F%91graphicsView%E7%9A%84%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>最开始用的是重写的滚轮事件wheelEvent的方法,代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 重写滚轮事件处理函数</span><br><span class="hljs-comment">// 该函数用于处理滚轮事件，实现缩放功能</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::wheelEvent</span><span class="hljs-params">(QWheelEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 检查是否按下 Ctrl 键</span><br>    <span class="hljs-keyword">if</span> (QApplication::<span class="hljs-built_in">keyboardModifiers</span>() &amp; Qt::ControlModifier)<br>    &#123;<br>        <span class="hljs-comment">// 获取滚轮滚动角度（通常 1 步 = 120 度）</span><br>        <span class="hljs-type">int</span> delta = event-&gt;<span class="hljs-built_in">angleDelta</span>().<span class="hljs-built_in">y</span>();<br><br>        <span class="hljs-keyword">if</span> (delta &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>, <span class="hljs-number">1.1</span>); <span class="hljs-comment">// 放大10%</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">scale</span>(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>); <span class="hljs-comment">// 缩小10%</span><br>        &#125;<br><br>        event-&gt;<span class="hljs-built_in">accept</span>(); <span class="hljs-comment">// 表示事件已处理</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 其他情况（如普通滚轮滚动）交给父类处理</span><br>        QWidget::<span class="hljs-built_in">wheelEvent</span>(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此方法会导致先触发鼠标滚轮的滚动,等滚动到了尽头后才触发自定义的放大缩小.效果如图:<br><img src="/image/%E8%A7%A3%E5%86%B3QT%E8%AE%BE%E7%BD%AECtrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE-%E4%BC%9A%E8%A7%A6%E5%8F%91graphicsView%E7%9A%84%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%A7%BB%E5%8A%A8/1753110867528.gif" alt="可以看到,要滚到底才能实现放大缩小."></p><p>后来改用事件过滤器方案,代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">MainWindow::eventFilter</span><span class="hljs-params">(QObject *obj, QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (event-&gt;<span class="hljs-built_in">type</span>() == QEvent::GraphicsSceneWheel)<br>    &#123;<br>        ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">setTransformationAnchor</span>(QGraphicsView::AnchorUnderMouse);<br>        <span class="hljs-type">double</span> scaleFactor = <span class="hljs-number">1.15</span>;<br>        <span class="hljs-type">bool</span> ok = QApplication::<span class="hljs-built_in">keyboardModifiers</span>() &amp; Qt::ControlModifier;<br>        <span class="hljs-keyword">if</span> (ok)<br>        &#123;<br>            QGraphicsSceneWheelEvent *scrollevent = <span class="hljs-built_in">static_cast</span>&lt;QGraphicsSceneWheelEvent *&gt;(event);<br>            <span class="hljs-keyword">if</span> (scrollevent-&gt;<span class="hljs-built_in">delta</span>() &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">scale</span>(scaleFactor, scaleFactor);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span> / scaleFactor, <span class="hljs-number">1</span> / scaleFactor);<br>            &#125;<br>        &#125;<br><br>        event-&gt;<span class="hljs-built_in">accept</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在创建场景的下面添加注册事件过滤器即可:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 创建场景并安装事件过滤器</span><br>QGraphicsScene *scene = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QGraphicsScene</span>(<span class="hljs-keyword">this</span>);<br>ui-&gt;graphicsView_result-&gt;<span class="hljs-built_in">setScene</span>(scene);<br>scene-&gt;<span class="hljs-built_in">installEventFilter</span>(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><p>这样子就可以实现ctrl+鼠标滚轮实现QGraohicsScene放大缩小,而不是优先触发滚动事件了,效果如图:<br><img src="/image/%E8%A7%A3%E5%86%B3QT%E8%AE%BE%E7%BD%AECtrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE-%E4%BC%9A%E8%A7%A6%E5%8F%91graphicsView%E7%9A%84%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%A7%BB%E5%8A%A8/1753110605408.gif" alt="可以看到,不需要滚到底就可以实现放大缩小了."></p>]]></content>
    
    
    
    <tags>
      
      <tag>拼好图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ai筛选NSFW图片</title>
    <link href="/2025/07/20/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/"/>
    <url>/2025/07/20/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>刷梗图的时候，主要是看到有意思的存，中间的滑动和拼接流程太影响效率了，于是写了个爬虫把我经常逛的所有群的图片都下载下来，但是里面有一些NSFW内容，于是打算用ai剔除一下子后导入自己的图片查看分类器中。由于可能是NSFW内容，所以肯定用不了云端AI的，于是ollma部署了一个本地ai：gemma3:12b。</p><p><img src="/image/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/1753001627352.png" alt="4060笔记本的占用"></p><p><img src="/image/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/1753001645651.png" alt="4060笔记本的占用"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(<br>    level=logging.INFO,  <span class="hljs-comment"># 设置日志级别</span><br>    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>,  <span class="hljs-comment"># 定义日志格式</span><br>    datefmt=<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,  <span class="hljs-comment"># 定义时间格式</span><br>)<br><br>sourcePath = <span class="hljs-string">&quot;&quot;</span><br>NsfwPath = <span class="hljs-string">&quot;&quot;</span><br>AfterPath = <span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_base64</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将图片转换为base64编码字符串&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-comment"># 读取文件内容并转换为Base64编码</span><br>        base64_encoded_data = base64.b64encode(file.read())<br>        <span class="hljs-comment"># 在Python 3中,b64encode返回的是bytes类型,需要解码为字符串</span><br>        base64_encoded_str = base64_encoded_data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">return</span> base64_encoded_str<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_image</span>(<span class="hljs-params">image_path, prompt, ollama_url=<span class="hljs-string">&quot;http://localhost:11434&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用Ollama的Gemma模型描述图片</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">        image_path: 图片文件路径</span><br><span class="hljs-string">        prompt: 描述提示</span><br><span class="hljs-string">        ollama_url: Ollama服务地址,默认为本地11434端口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">        image_path: 图片文件路径</span><br><span class="hljs-string">        ollama_url: Ollama服务地址,默认为本地11434端口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回:</span><br><span class="hljs-string">        模型生成的图片描述</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将图片转换为base64</span><br>    image_base64 = image_to_base64(image_path)<br>    <span class="hljs-comment"># 准备请求数据</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;gemma3:12b&quot;</span>,<br>        <span class="hljs-string">&quot;prompt&quot;</span>: prompt,<br>        <span class="hljs-string">&quot;images&quot;</span>: [image_base64],<br>        <span class="hljs-string">&quot;stream&quot;</span>: <span class="hljs-literal">False</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 发送请求到Ollama API</span><br>        response = requests.post(<br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ollama_url&#125;</span>/api/generate&quot;</span>,<br>            json=data,<br>            headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>&#125;,<br>            timeout=<span class="hljs-number">300</span>,  <span class="hljs-comment"># 300秒超时</span><br>        )<br>        response.raise_for_status()<br><br>        <span class="hljs-comment"># 解析响应</span><br>        result = response.json()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, result.get(<span class="hljs-string">&quot;response&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求Ollama API时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">f&quot;请求Ollama API时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(sourcePath):<br>        image_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;sourcePath&#125;</span>/<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(image_path):<br>            <span class="hljs-keyword">continue</span><br>        logging.info(<span class="hljs-string">f&quot;正在处理图片: <span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>        success, result = describe_image(<br>            image_path,<br>            <span class="hljs-string">&quot;请我帮我判断这张图片是否为NSFW的图片,是只用回答是，否只用回答否，谢谢。&quot;</span>,<br>        )<br>        <span class="hljs-keyword">if</span> success:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;是&quot;</span> <span class="hljs-keyword">in</span> result:<br>                logging.info(<span class="hljs-string">f&quot;回答:<span class="hljs-subst">&#123;result&#125;</span>, <span class="hljs-subst">&#123;i&#125;</span>-&gt;<span class="hljs-subst">&#123;NsfwPath&#125;</span>;&quot;</span>)<br>                os.rename(image_path, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;NsfwPath&#125;</span>/<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                logging.info(<span class="hljs-string">f&quot;回答:<span class="hljs-subst">&#123;result&#125;</span>, <span class="hljs-subst">&#123;i&#125;</span>-&gt;<span class="hljs-subst">&#123;AfterPath&#125;</span>;&quot;</span>)<br>                os.rename(image_path, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;AfterPath&#125;</span>/<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">f&quot;处理图片 <span class="hljs-subst">&#123;i&#125;</span> 时出错: <span class="hljs-subst">&#123;result&#125;</span>;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>在我的4060笔记本上大概6秒能判断一张图片。</p><p><img src="/image/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/1753001762228.png" alt="运行中效果"></p><p>但是因为只有12b的模型，只能过滤一些非常NSFW的，还是需要人工介入，不过过滤一些非常NSFW的对我来说已经够了。</p><p><img src="/image/ai%E7%AD%9B%E9%80%89NSFW%E5%9B%BE%E7%89%87/1753001866733.png" alt="比如这张图片会被判断成NSFW"></p>]]></content>
    
    
    
    <tags>
      
      <tag>梗图更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo无法显示图片，访问图片链接显示Cannot GET /image/xxx/xxx.png</title>
    <link href="/2025/07/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/07/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>解决方案:把_post目录下的image文件夹整个复制到public里面。</strong></p><p>由于我是直接用vscode复制粘贴图片编辑md的。</p><p>访问图片会显示：</p><p><img src="/image/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/1752977198946.png"></p><p>而本地预览是正常的：</p><p><img src="/image/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/1752977215009.png"></p><p>访问进去发现图片链接是：</p><p><img src="/image/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/1752977248357.png"></p><p>解决方案是把_post目录下的image文件夹整个复制到public里面。</p><p>再刷新，就可以显示图片了：</p><p><img src="/image/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/20/hello-world/"/>
    <url>/2025/07/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
